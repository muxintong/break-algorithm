"""
双指针解决如下三类问题：
1.快慢指针：链表、归并排序找中点、链表成环判定
2.左右指针：数组问题、二分搜索、反转数组
3.滑动窗口：子串问题


Note：
python built-in function：
dict()
1. len(dict)
2. cmp(dict1,dict2)
3.1 dict.get(key[, default=None])
    key=>存在:返回key对应的value
         不存在：返回default
3.2 dict.setdefult(key[, default=None])
    类似dict.get(),
    但当key不存在时：不会返回default，而是添加该不存在的key，并将该值设为default。
    此时若设置了default值，返回default值；若为设置default值，默认为None，无返回值。
4. dict.keys()      # return: list[k1, k2, ...]
   dict.values()    # return: list[v1, v2, ...]
   dict.items()     # dict_items([(k1, v1), (k2, v2), ...])  以列表返回可遍历的(k,v)元组数组
   dict.has_key(key) # True/False
   dict.pop(key[, default]) # 删除key对应的value，
                            # key存在：删value，并返回value值；
                            # key不存在若设置了default：返回default值；
                            # key不存在default未设置，报错：KeyError。
   dict.popitem() # (last_key, last_value)  删除并返回最后一对k-v

enumerate():
1. enumerate(sequence[, start=0])
    sequence: 可遍历对象：list、string、tuple、dict...
    组合为(start,value)索引序列      # start:对应index_0
    ***一般用于for循环，当索引start位不在for循环中使用时，可使用_单下划线作为占位符
2. example：

>>> list1=['a','b','c']
>>> enumerate(list1)
<enumerate object at 0x000002679C0A5EC0>

>>> list2=enumerate(list1)
>>> list2
<enumerate object at 0x000002679C0A5D40>
>>> list2=list(enumerate(list1))
>>> list2
[(0, 'a'), (1, 'b'), (2, 'c')]

>>> for i,element in enumerate(list1):print(i,element)
0 a
1 b
2 c
>>> for _,element in enumerate(list1):print(element)
a
b
c
>>>
"""


def slidingWindow(self, s: str, t: str) -> str:
    window = dict()
    need = dict()
    for c in t:
        need.setdefault(c, 0)
        need[c] += 1

    left = right = 0
    valid = 0  # valid表示窗口中满足need条件的字符个数，如果valid和len(need)的大小相同，则说明窗口已经满足条件，已经完全覆盖了串t。

    # answer relevant vars：record answer
    for right, in_win_char in enumerate(s):
        # 1.增大窗口
        # right：右移窗口指针，增大窗口
        # in_win_char：移入窗口的字符
        window.setdefault(in_win_char, 0)
        # 1.2 更新窗口内数据
        if in_win_char in need.keys():
            window[in_win_char] += 1
            if window[in_win_char] == need[in_win_char]:
                valid += 1

        # 2.debug position：
        # print("window: [%d, %d)\n" % (left,right));

        # 3.收缩窗口
        # 3.1 判断左侧窗口是否要收缩：找到可行解时，左侧窗口即可进行收缩。
        while (valid == len(need) | valid >= len(need) | right - left + 1 >= len(t)):
            # 3. 更新答案可能位置1

            # 3.3 缩小窗口
            # out_win_char：将移出窗口的字符
            out_win_char = s[left]
            # 缩小窗口
            left += 1
            # 3.4 更新窗口内数据
            if out_win_char in need.keys():
                if window[out_win_char] == need[out_win_char]:
                    valid -= 1
                window[out_win_char] -= 1

        # 3. 更新答案可能位置2

    return
